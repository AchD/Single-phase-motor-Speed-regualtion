

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Jan 02 12:03:58 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F676
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x5E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F676 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0007                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0019                     	;# 
    69  001E                     	;# 
    70  001F                     	;# 
    71  0081                     	;# 
    72  0085                     	;# 
    73  0087                     	;# 
    74  008C                     	;# 
    75  008E                     	;# 
    76  0090                     	;# 
    77  0091                     	;# 
    78  0095                     	;# 
    79  0095                     	;# 
    80  0096                     	;# 
    81  0096                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009E                     	;# 
    89  009F                     	;# 
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0007                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000E                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0019                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0087                     	;# 
   110  008C                     	;# 
   111  008E                     	;# 
   112  0090                     	;# 
   113  0091                     	;# 
   114  0095                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0096                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  001E                     _ADRESH	set	30
   127  000B                     _INTCON	set	11
   128  0019                     _CMCON	set	25
   129  001F                     _ADCON0	set	31
   130  0038                     _RC0	set	56
   131  005B                     _RAIE	set	91
   132  0058                     _RAIF	set	88
   133  0028                     _RA0	set	40
   134  00F9                     _GO	set	249
   135  003B                     _RC3	set	59
   136  003C                     _RC4	set	60
   137  003D                     _RC5	set	61
   138  003A                     _RC2	set	58
   139  009E                     _ADRESL	set	158
   140  0096                     _IOCA	set	150
   141  0085                     _TRISA	set	133
   142  0087                     _TRISC	set	135
   143  009F                     _ADCON1	set	159
   144  0091                     _ANSEL	set	145
   145                           
   146                           	psect	cinit
   147  000C                     start_initialization:	
   148                           ; #config settings
   149                           
   150  000C                     __initialization:
   151                           
   152                           ; Clear objects allocated to BANK0
   153  000C  1383               	bcf	3,7	;select IRP bank0
   154  000D  304A               	movlw	low __pbssBANK0
   155  000E  0084               	movwf	4
   156  000F  305A               	movlw	low (__pbssBANK0+16)
   157  0010  23D9               	fcall	clear_ram0
   158  0011                     end_of_initialization:	
   159                           ;End of C runtime variable initialization code
   160                           
   161  0011                     __end_of__initialization:
   162  0011  0183               	clrf	3
   163  0012  2813               	ljmp	_main	;jump to C main() function
   164                           
   165                           	psect	bssBANK0
   166  004A                     __pbssBANK0:
   167  004A                     _Triac:
   168  004A                     	ds	2
   169  004C                     _gnLED:
   170  004C                     	ds	2
   171  004E                     _Boost:
   172  004E                     	ds	2
   173  0050                     _GetPoint:
   174  0050                     	ds	2
   175  0052                     _SetPoint:
   176  0052                     	ds	2
   177  0054                     _irqPin:
   178  0054                     	ds	2
   179  0056                     _EinX:
   180  0056                     	ds	2
   181  0058                     _ZeroX:
   182  0058                     	ds	2
   183                           
   184                           	psect	clrtext
   185  03D9                     clear_ram0:	
   186                           ;	Called with FSR containing the base address, and
   187                           ;	W with the last address+1
   188                           
   189  03D9  0064               	clrwdt	;clear the watchdog before getting into this loop
   190  03DA                     clrloop0:
   191  03DA  0180               	clrf	0	;clear RAM location pointed to by FSR
   192  03DB  0A84               	incf	4,f	;increment pointer
   193  03DC  0604               	xorwf	4,w	;XOR with final address
   194  03DD  1903               	btfsc	3,2	;have we reached the end yet?
   195  03DE  3400               	retlw	0	;all done for this memory range, return
   196  03DF  0604               	xorwf	4,w	;XOR again to restore value
   197  03E0  2BDA               	goto	clrloop0	;do the next byte
   198                           
   199                           	psect	cstackCOMMON
   200  0000                     __pcstackCOMMON:
   201  0000                     ??___wmul:
   202                           
   203                           	psect	cstackBANK0
   204  0020                     __pcstackBANK0:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0020                     ?_main:
   208  0020                     ?_interruptOnChangeIsr:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0020                     ??_interruptOnChangeIsr:	
   212                           ; 1 bytes @ 0x0
   213                           
   214                           
   215                           ; 1 bytes @ 0x0
   216  0020                     	ds	4
   217  0024                     ?___wmul:
   218  0024                     ?___lmul:	
   219                           ; 2 bytes @ 0x4
   220                           
   221  0024                     ___wmul@multiplier:	
   222                           ; 4 bytes @ 0x4
   223                           
   224  0024                     ___lmul@multiplier:	
   225                           ; 2 bytes @ 0x4
   226                           
   227                           
   228                           ; 4 bytes @ 0x4
   229  0024                     	ds	2
   230  0026                     ___wmul@multiplicand:
   231                           
   232                           ; 2 bytes @ 0x6
   233  0026                     	ds	2
   234  0028                     ___wmul@product:
   235  0028                     ___lmul@multiplicand:	
   236                           ; 2 bytes @ 0x8
   237                           
   238                           
   239                           ; 4 bytes @ 0x8
   240  0028                     	ds	2
   241  002A                     ?___awdiv:
   242  002A                     ___awdiv@divisor:	
   243                           ; 2 bytes @ 0xA
   244                           
   245                           
   246                           ; 2 bytes @ 0xA
   247  002A                     	ds	2
   248  002C                     ??___lmul:
   249  002C                     ___awdiv@dividend:	
   250                           ; 1 bytes @ 0xC
   251                           
   252                           
   253                           ; 2 bytes @ 0xC
   254  002C                     	ds	1
   255  002D                     ___lmul@product:
   256                           
   257                           ; 4 bytes @ 0xD
   258  002D                     	ds	1
   259  002E                     ??___awdiv:
   260                           
   261                           ; 1 bytes @ 0xE
   262  002E                     	ds	1
   263  002F                     ___awdiv@counter:
   264                           
   265                           ; 1 bytes @ 0xF
   266  002F                     	ds	1
   267  0030                     ___awdiv@sign:
   268                           
   269                           ; 1 bytes @ 0x10
   270  0030                     	ds	1
   271  0031                     ?___lldiv:
   272  0031                     ___awdiv@quotient:	
   273                           ; 4 bytes @ 0x11
   274                           
   275  0031                     ___lldiv@divisor:	
   276                           ; 2 bytes @ 0x11
   277                           
   278                           
   279                           ; 4 bytes @ 0x11
   280  0031                     	ds	4
   281  0035                     ___lldiv@dividend:
   282                           
   283                           ; 4 bytes @ 0x15
   284  0035                     	ds	4
   285  0039                     ??___lldiv:
   286                           
   287                           ; 1 bytes @ 0x19
   288  0039                     	ds	1
   289  003A                     ___lldiv@quotient:
   290                           
   291                           ; 4 bytes @ 0x1A
   292  003A                     	ds	4
   293  003E                     ___lldiv@counter:
   294                           
   295                           ; 1 bytes @ 0x1E
   296  003E                     	ds	1
   297  003F                     ?_readADC:
   298                           
   299                           ; 2 bytes @ 0x1F
   300  003F                     	ds	2
   301  0041                     ??_readADC:
   302                           
   303                           ; 1 bytes @ 0x21
   304  0041                     	ds	4
   305  0045                     readADC@Analog:
   306                           
   307                           ; 4 bytes @ 0x25
   308  0045                     	ds	4
   309  0049                     ??_main:
   310                           
   311                           ; 1 bytes @ 0x29
   312  0049                     	ds	1
   313                           
   314                           	psect	maintext
   315  0013                     __pmaintext:	
   316 ;;
   317 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   318 ;;
   319 ;; *************** function _main *****************
   320 ;; Defined at:
   321 ;;		line 30 in file "main.c"
   322 ;; Parameters:    Size  Location     Type
   323 ;;		None
   324 ;; Auto vars:     Size  Location     Type
   325 ;;		None
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : B00/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMMON   BANK0
   335 ;;      Params:         0       0
   336 ;;      Locals:         0       0
   337 ;;      Temps:          0       1
   338 ;;      Totals:         0       1
   339 ;;Total ram usage:        1 bytes
   340 ;; Hardware stack levels required when called: 3
   341 ;; This function calls:
   342 ;;		___awdiv
   343 ;;		___wmul
   344 ;;		_readADC
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           
   351                           ;psect for function _main
   352  0013                     _main:
   353  0013                     l1028:	
   354                           ;incstack = 0
   355                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   356                           
   357                           
   358                           ;main.c: 31: ANSEL=0x20;
   359  0013  3020               	movlw	32
   360  0014  1683               	bsf	3,5	;RP0=1, select bank1
   361  0015  0091               	movwf	17	;volatile
   362                           
   363                           ;main.c: 32: ADCON0=0x95;
   364  0016  3095               	movlw	149
   365  0017  1283               	bcf	3,5	;RP0=0, select bank0
   366  0018  009F               	movwf	31	;volatile
   367                           
   368                           ;main.c: 33: ADCON1=0x10;
   369  0019  3010               	movlw	16
   370  001A  1683               	bsf	3,5	;RP0=1, select bank1
   371  001B  009F               	movwf	31	;volatile
   372                           
   373                           ;main.c: 34: CMCON=0x07;
   374  001C  3007               	movlw	7
   375  001D  1283               	bcf	3,5	;RP0=0, select bank0
   376  001E  0099               	movwf	25	;volatile
   377                           
   378                           ;main.c: 35: TRISC=0x0E;
   379  001F  300E               	movlw	14
   380  0020  1683               	bsf	3,5	;RP0=1, select bank1
   381  0021  0087               	movwf	7	;volatile
   382                           
   383                           ;main.c: 36: TRISA=0x01;
   384  0022  3001               	movlw	1
   385  0023  0085               	movwf	5	;volatile
   386                           
   387                           ;main.c: 37: IOCA=0x01;
   388  0024  3001               	movlw	1
   389  0025  0096               	movwf	22	;volatile
   390                           
   391                           ;main.c: 38: INTCON=0x88;
   392  0026  3088               	movlw	136
   393  0027  008B               	movwf	11	;volatile
   394  0028                     l1030:
   395                           
   396                           ;main.c: 40: ZeroX=0;
   397  0028  1283               	bcf	3,5	;RP0=0, select bank0
   398  0029  01D8               	clrf	_ZeroX
   399  002A  01D9               	clrf	_ZeroX+1
   400  002B                     l1032:
   401                           
   402                           ;main.c: 41: EinX=0;
   403  002B  01D6               	clrf	_EinX
   404  002C  01D7               	clrf	_EinX+1
   405  002D                     l1034:
   406                           
   407                           ;main.c: 43: if (RC2) {
   408  002D  1D07               	btfss	7,2	;volatile
   409  002E  2830               	goto	u821
   410  002F  2831               	goto	u820
   411  0030                     u821:
   412  0030  283B               	goto	l1040
   413  0031                     u820:
   414  0031                     l1036:
   415                           
   416                           ;main.c: 44: Boost = 100;
   417  0031  3064               	movlw	100
   418  0032  00CE               	movwf	_Boost
   419  0033  3000               	movlw	0
   420  0034  00CF               	movwf	_Boost+1
   421                           
   422                           ;main.c: 45: SetPoint = Boost;
   423  0035  3064               	movlw	100
   424  0036  00D2               	movwf	_SetPoint
   425  0037  3000               	movlw	0
   426  0038  00D3               	movwf	_SetPoint+1
   427  0039                     l1038:
   428                           
   429                           ;main.c: 46: RC5 = 1;
   430  0039  1687               	bsf	7,5	;volatile
   431                           
   432                           ;main.c: 47: } else {
   433  003A  2877               	goto	l1048
   434  003B                     l1040:
   435                           
   436                           ;main.c: 48: Boost = 0;
   437  003B  01CE               	clrf	_Boost
   438  003C  01CF               	clrf	_Boost+1
   439  003D                     l1042:
   440                           
   441                           ;main.c: 49: SetPoint = readADC();
   442  003D  21C2               	fcall	_readADC
   443  003E  1283               	bcf	3,5	;RP0=0, select bank0
   444  003F  0840               	movf	?_readADC+1,w
   445  0040  00D3               	movwf	_SetPoint+1
   446  0041  083F               	movf	?_readADC,w
   447  0042  00D2               	movwf	_SetPoint
   448  0043                     l1044:
   449                           
   450                           ;main.c: 50: gnLED = (SetPoint * 100) / 100;
   451  0043  3064               	movlw	100
   452  0044  00AA               	movwf	___awdiv@divisor
   453  0045  3000               	movlw	0
   454  0046  00AB               	movwf	___awdiv@divisor+1
   455  0047  0853               	movf	_SetPoint+1,w
   456  0048  00A5               	movwf	___wmul@multiplier+1
   457  0049  0852               	movf	_SetPoint,w
   458  004A  00A4               	movwf	___wmul@multiplier
   459  004B  3064               	movlw	100
   460  004C  00A6               	movwf	___wmul@multiplicand
   461  004D  3000               	movlw	0
   462  004E  00A7               	movwf	___wmul@multiplicand+1
   463  004F  23B3               	fcall	___wmul
   464  0050  1283               	bcf	3,5	;RP0=0, select bank0
   465  0051  0825               	movf	?___wmul+1,w
   466  0052  00AD               	movwf	___awdiv@dividend+1
   467  0053  0824               	movf	?___wmul,w
   468  0054  00AC               	movwf	___awdiv@dividend
   469  0055  2269               	fcall	___awdiv
   470  0056  1283               	bcf	3,5	;RP0=0, select bank0
   471  0057  082B               	movf	?___awdiv+1,w
   472  0058  00CD               	movwf	_gnLED+1
   473  0059  082A               	movf	?___awdiv,w
   474  005A  00CC               	movwf	_gnLED
   475  005B                     l1046:
   476                           
   477                           ;main.c: 51: SetPoint = 75 + ((SetPoint*(100-75))/100);
   478  005B  3064               	movlw	100
   479  005C  00AA               	movwf	___awdiv@divisor
   480  005D  3000               	movlw	0
   481  005E  00AB               	movwf	___awdiv@divisor+1
   482  005F  0853               	movf	_SetPoint+1,w
   483  0060  00A5               	movwf	___wmul@multiplier+1
   484  0061  0852               	movf	_SetPoint,w
   485  0062  00A4               	movwf	___wmul@multiplier
   486  0063  3019               	movlw	25
   487  0064  00A6               	movwf	___wmul@multiplicand
   488  0065  3000               	movlw	0
   489  0066  00A7               	movwf	___wmul@multiplicand+1
   490  0067  23B3               	fcall	___wmul
   491  0068  1283               	bcf	3,5	;RP0=0, select bank0
   492  0069  0825               	movf	?___wmul+1,w
   493  006A  00AD               	movwf	___awdiv@dividend+1
   494  006B  0824               	movf	?___wmul,w
   495  006C  00AC               	movwf	___awdiv@dividend
   496  006D  2269               	fcall	___awdiv
   497  006E  1283               	bcf	3,5	;RP0=0, select bank0
   498  006F  082A               	movf	?___awdiv,w
   499  0070  3E4B               	addlw	75
   500  0071  00D2               	movwf	_SetPoint
   501  0072  082B               	movf	?___awdiv+1,w
   502  0073  1803               	skipnc
   503  0074  3E01               	addlw	1
   504  0075  3E00               	addlw	0
   505  0076  00D3               	movwf	_SetPoint+1
   506  0077                     l1048:
   507                           
   508                           ;main.c: 56: if (ZeroX >= 100) {
   509  0077  0859               	movf	_ZeroX+1,w
   510  0078  3A80               	xorlw	128
   511  0079  00DF               	movwf	btemp+1
   512  007A  3080               	movlw	128
   513  007B  025F               	subwf	btemp+1,w
   514  007C  1D03               	skipz
   515  007D  2880               	goto	u835
   516  007E  3064               	movlw	100
   517  007F  0258               	subwf	_ZeroX,w
   518  0080                     u835:
   519  0080  1C03               	skipc
   520  0081  2883               	goto	u831
   521  0082  2884               	goto	u830
   522  0083                     u831:
   523  0083  28EC               	goto	l1076
   524  0084                     u830:
   525  0084                     l1050:
   526                           
   527                           ;main.c: 57: ZeroX=0;
   528  0084  1283               	bcf	3,5	;RP0=0, select bank0
   529  0085  01D8               	clrf	_ZeroX
   530  0086  01D9               	clrf	_ZeroX+1
   531                           
   532                           ;main.c: 58: EinX=0;
   533  0087  01D6               	clrf	_EinX
   534  0088  01D7               	clrf	_EinX+1
   535  0089                     l1052:
   536                           
   537                           ;main.c: 59: SetPoint = readADC();
   538  0089  21C2               	fcall	_readADC
   539  008A  1283               	bcf	3,5	;RP0=0, select bank0
   540  008B  0840               	movf	?_readADC+1,w
   541  008C  00D3               	movwf	_SetPoint+1
   542  008D  083F               	movf	?_readADC,w
   543  008E  00D2               	movwf	_SetPoint
   544  008F                     l1054:
   545                           
   546                           ;main.c: 60: gnLED = (SetPoint * 100) / 100;
   547  008F  3064               	movlw	100
   548  0090  00AA               	movwf	___awdiv@divisor
   549  0091  3000               	movlw	0
   550  0092  00AB               	movwf	___awdiv@divisor+1
   551  0093  0853               	movf	_SetPoint+1,w
   552  0094  00A5               	movwf	___wmul@multiplier+1
   553  0095  0852               	movf	_SetPoint,w
   554  0096  00A4               	movwf	___wmul@multiplier
   555  0097  3064               	movlw	100
   556  0098  00A6               	movwf	___wmul@multiplicand
   557  0099  3000               	movlw	0
   558  009A  00A7               	movwf	___wmul@multiplicand+1
   559  009B  23B3               	fcall	___wmul
   560  009C  1283               	bcf	3,5	;RP0=0, select bank0
   561  009D  0825               	movf	?___wmul+1,w
   562  009E  00AD               	movwf	___awdiv@dividend+1
   563  009F  0824               	movf	?___wmul,w
   564  00A0  00AC               	movwf	___awdiv@dividend
   565  00A1  2269               	fcall	___awdiv
   566  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   567  00A3  082B               	movf	?___awdiv+1,w
   568  00A4  00CD               	movwf	_gnLED+1
   569  00A5  082A               	movf	?___awdiv,w
   570  00A6  00CC               	movwf	_gnLED
   571  00A7                     l1056:
   572                           
   573                           ;main.c: 62: SetPoint = 75 + ((SetPoint*(100-75))/100);
   574  00A7  3064               	movlw	100
   575  00A8  00AA               	movwf	___awdiv@divisor
   576  00A9  3000               	movlw	0
   577  00AA  00AB               	movwf	___awdiv@divisor+1
   578  00AB  0853               	movf	_SetPoint+1,w
   579  00AC  00A5               	movwf	___wmul@multiplier+1
   580  00AD  0852               	movf	_SetPoint,w
   581  00AE  00A4               	movwf	___wmul@multiplier
   582  00AF  3019               	movlw	25
   583  00B0  00A6               	movwf	___wmul@multiplicand
   584  00B1  3000               	movlw	0
   585  00B2  00A7               	movwf	___wmul@multiplicand+1
   586  00B3  23B3               	fcall	___wmul
   587  00B4  1283               	bcf	3,5	;RP0=0, select bank0
   588  00B5  0825               	movf	?___wmul+1,w
   589  00B6  00AD               	movwf	___awdiv@dividend+1
   590  00B7  0824               	movf	?___wmul,w
   591  00B8  00AC               	movwf	___awdiv@dividend
   592  00B9  2269               	fcall	___awdiv
   593  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   594  00BB  082A               	movf	?___awdiv,w
   595  00BC  3E4B               	addlw	75
   596  00BD  00D2               	movwf	_SetPoint
   597  00BE  082B               	movf	?___awdiv+1,w
   598  00BF  1803               	skipnc
   599  00C0  3E01               	addlw	1
   600  00C1  3E00               	addlw	0
   601  00C2  00D3               	movwf	_SetPoint+1
   602  00C3                     l1058:
   603                           
   604                           ;main.c: 64: if (RC2) {
   605  00C3  1D07               	btfss	7,2	;volatile
   606  00C4  28C6               	goto	u841
   607  00C5  28C7               	goto	u840
   608  00C6                     u841:
   609  00C6  28EA               	goto	l1072
   610  00C7                     u840:
   611  00C7                     l1060:
   612                           
   613                           ;main.c: 65: if (Boost > SetPoint) {
   614  00C7  0853               	movf	_SetPoint+1,w
   615  00C8  3A80               	xorlw	128
   616  00C9  00C9               	movwf	??_main
   617  00CA  084F               	movf	_Boost+1,w
   618  00CB  3A80               	xorlw	128
   619  00CC  0249               	subwf	??_main,w
   620  00CD  1D03               	skipz
   621  00CE  28D1               	goto	u855
   622  00CF  084E               	movf	_Boost,w
   623  00D0  0252               	subwf	_SetPoint,w
   624  00D1                     u855:
   625  00D1  1803               	skipnc
   626  00D2  28D4               	goto	u851
   627  00D3  28D5               	goto	u850
   628  00D4                     u851:
   629  00D4  28E2               	goto	l1066
   630  00D5                     u850:
   631  00D5                     l1062:
   632                           
   633                           ;main.c: 66: SetPoint = Boost;
   634  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   635  00D6  084F               	movf	_Boost+1,w
   636  00D7  00D3               	movwf	_SetPoint+1
   637  00D8  084E               	movf	_Boost,w
   638  00D9  00D2               	movwf	_SetPoint
   639                           
   640                           ;main.c: 67: Boost-=20;
   641  00DA  30EC               	movlw	236
   642  00DB  07CE               	addwf	_Boost,f
   643  00DC  1803               	skipnc
   644  00DD  0ACF               	incf	_Boost+1,f
   645  00DE  30FF               	movlw	255
   646  00DF  07CF               	addwf	_Boost+1,f
   647  00E0                     l1064:
   648                           
   649                           ;main.c: 68: RC5 = 1;
   650  00E0  1687               	bsf	7,5	;volatile
   651                           
   652                           ;main.c: 69: } else {
   653  00E1  28E6               	goto	l1070
   654  00E2                     l1066:
   655                           
   656                           ;main.c: 70: Boost = 0;
   657  00E2  1283               	bcf	3,5	;RP0=0, select bank0
   658  00E3  01CE               	clrf	_Boost
   659  00E4  01CF               	clrf	_Boost+1
   660  00E5                     l1068:
   661                           
   662                           ;main.c: 71: RC5 = 0;
   663  00E5  1287               	bcf	7,5	;volatile
   664  00E6                     l1070:
   665                           
   666                           ;main.c: 72: };main.c: 73: if (Boost < 0) {
   667  00E6  1FCF               	btfss	_Boost+1,7
   668  00E7  28E9               	goto	u861
   669  00E8  28EA               	goto	u860
   670  00E9                     u861:
   671  00E9  28EC               	goto	l1076
   672  00EA                     u860:
   673  00EA                     l1072:
   674                           
   675                           ;main.c: 74: Boost=0;
   676  00EA  01CE               	clrf	_Boost
   677  00EB  01CF               	clrf	_Boost+1
   678  00EC                     l1076:
   679                           
   680                           ;main.c: 78: };main.c: 79: };main.c: 81: if ((gnLED < 20) & (gnLED > 0)) {
   681  00EC  1283               	bcf	3,5	;RP0=0, select bank0
   682  00ED  084D               	movf	_gnLED+1,w
   683  00EE  3A80               	xorlw	128
   684  00EF  00DF               	movwf	btemp+1
   685  00F0  3080               	movlw	128
   686  00F1  025F               	subwf	btemp+1,w
   687  00F2  1D03               	skipz
   688  00F3  28F6               	goto	u875
   689  00F4  3014               	movlw	20
   690  00F5  024C               	subwf	_gnLED,w
   691  00F6                     u875:
   692  00F6  1803               	skipnc
   693  00F7  28F9               	goto	u871
   694  00F8  28FA               	goto	u870
   695  00F9                     u871:
   696  00F9  290E               	goto	l1082
   697  00FA                     u870:
   698  00FA                     l1078:
   699  00FA  1283               	bcf	3,5	;RP0=0, select bank0
   700  00FB  084D               	movf	_gnLED+1,w
   701  00FC  3A80               	xorlw	128
   702  00FD  00DF               	movwf	btemp+1
   703  00FE  3080               	movlw	128
   704  00FF  025F               	subwf	btemp+1,w
   705  0100  1D03               	skipz
   706  0101  2904               	goto	u885
   707  0102  3001               	movlw	1
   708  0103  024C               	subwf	_gnLED,w
   709  0104                     u885:
   710  0104  1C03               	skipc
   711  0105  2907               	goto	u881
   712  0106  2908               	goto	u880
   713  0107                     u881:
   714  0107  290E               	goto	l1082
   715  0108                     u880:
   716  0108                     l1080:
   717                           
   718                           ;main.c: 82: gnLED = 20;
   719  0108  3014               	movlw	20
   720  0109  1283               	bcf	3,5	;RP0=0, select bank0
   721  010A  00CC               	movwf	_gnLED
   722  010B  3000               	movlw	0
   723  010C  00CD               	movwf	_gnLED+1
   724                           
   725                           ;main.c: 83: } else if ((gnLED > (100-20)) & (gnLED < 100)) {
   726  010D  292F               	goto	l71
   727  010E                     l1082:
   728  010E  1283               	bcf	3,5	;RP0=0, select bank0
   729  010F  084D               	movf	_gnLED+1,w
   730  0110  3A80               	xorlw	128
   731  0111  00DF               	movwf	btemp+1
   732  0112  3080               	movlw	128
   733  0113  025F               	subwf	btemp+1,w
   734  0114  1D03               	skipz
   735  0115  2918               	goto	u895
   736  0116  3051               	movlw	81
   737  0117  024C               	subwf	_gnLED,w
   738  0118                     u895:
   739  0118  1C03               	skipc
   740  0119  291B               	goto	u891
   741  011A  291C               	goto	u890
   742  011B                     u891:
   743  011B  292F               	goto	l71
   744  011C                     u890:
   745  011C                     l1084:
   746  011C  1283               	bcf	3,5	;RP0=0, select bank0
   747  011D  084D               	movf	_gnLED+1,w
   748  011E  3A80               	xorlw	128
   749  011F  00DF               	movwf	btemp+1
   750  0120  3080               	movlw	128
   751  0121  025F               	subwf	btemp+1,w
   752  0122  1D03               	skipz
   753  0123  2926               	goto	u905
   754  0124  3064               	movlw	100
   755  0125  024C               	subwf	_gnLED,w
   756  0126                     u905:
   757  0126  1803               	skipnc
   758  0127  2929               	goto	u901
   759  0128  292A               	goto	u900
   760  0129                     u901:
   761  0129  292F               	goto	l71
   762  012A                     u900:
   763  012A                     l1086:
   764                           
   765                           ;main.c: 84: gnLED = 100 - 20;
   766  012A  3050               	movlw	80
   767  012B  1283               	bcf	3,5	;RP0=0, select bank0
   768  012C  00CC               	movwf	_gnLED
   769  012D  3000               	movlw	0
   770  012E  00CD               	movwf	_gnLED+1
   771  012F                     l71:
   772                           
   773                           ;main.c: 85: };main.c: 86: if (ZeroX >= gnLED) {
   774  012F  1283               	bcf	3,5	;RP0=0, select bank0
   775  0130  0859               	movf	_ZeroX+1,w
   776  0131  3A80               	xorlw	128
   777  0132  00C9               	movwf	??_main
   778  0133  084D               	movf	_gnLED+1,w
   779  0134  3A80               	xorlw	128
   780  0135  0249               	subwf	??_main,w
   781  0136  1D03               	skipz
   782  0137  293A               	goto	u915
   783  0138  084C               	movf	_gnLED,w
   784  0139  0258               	subwf	_ZeroX,w
   785  013A                     u915:
   786  013A  1C03               	skipc
   787  013B  293D               	goto	u911
   788  013C  293E               	goto	u910
   789  013D                     u911:
   790  013D  2941               	goto	l73
   791  013E                     u910:
   792  013E                     l1088:
   793                           
   794                           ;main.c: 87: RC4 = 0;
   795  013E  1283               	bcf	3,5	;RP0=0, select bank0
   796  013F  1207               	bcf	7,4	;volatile
   797                           
   798                           ;main.c: 88: } else {
   799  0140  2943               	goto	l74
   800  0141                     l73:
   801                           
   802                           ;main.c: 89: RC4 = 1;
   803  0141  1283               	bcf	3,5	;RP0=0, select bank0
   804  0142  1607               	bsf	7,4	;volatile
   805  0143                     l74:
   806                           
   807                           ;main.c: 90: };main.c: 92: if (!RC3) {
   808  0143  1987               	btfsc	7,3	;volatile
   809  0144  2946               	goto	u921
   810  0145  2947               	goto	u920
   811  0146                     u921:
   812  0146  2976               	goto	l1096
   813  0147                     u920:
   814  0147                     l1090:
   815                           
   816                           ;main.c: 94: GetPoint = (SetPoint * 100) / 100;
   817  0147  3064               	movlw	100
   818  0148  00AA               	movwf	___awdiv@divisor
   819  0149  3000               	movlw	0
   820  014A  00AB               	movwf	___awdiv@divisor+1
   821  014B  0853               	movf	_SetPoint+1,w
   822  014C  00A5               	movwf	___wmul@multiplier+1
   823  014D  0852               	movf	_SetPoint,w
   824  014E  00A4               	movwf	___wmul@multiplier
   825  014F  3064               	movlw	100
   826  0150  00A6               	movwf	___wmul@multiplicand
   827  0151  3000               	movlw	0
   828  0152  00A7               	movwf	___wmul@multiplicand+1
   829  0153  23B3               	fcall	___wmul
   830  0154  1283               	bcf	3,5	;RP0=0, select bank0
   831  0155  0825               	movf	?___wmul+1,w
   832  0156  00AD               	movwf	___awdiv@dividend+1
   833  0157  0824               	movf	?___wmul,w
   834  0158  00AC               	movwf	___awdiv@dividend
   835  0159  2269               	fcall	___awdiv
   836  015A  1283               	bcf	3,5	;RP0=0, select bank0
   837  015B  082B               	movf	?___awdiv+1,w
   838  015C  00D1               	movwf	_GetPoint+1
   839  015D  082A               	movf	?___awdiv,w
   840  015E  00D0               	movwf	_GetPoint
   841  015F                     l1092:
   842                           
   843                           ;main.c: 95: if (ZeroX >= GetPoint) {
   844  015F  0859               	movf	_ZeroX+1,w
   845  0160  3A80               	xorlw	128
   846  0161  00C9               	movwf	??_main
   847  0162  0851               	movf	_GetPoint+1,w
   848  0163  3A80               	xorlw	128
   849  0164  0249               	subwf	??_main,w
   850  0165  1D03               	skipz
   851  0166  2969               	goto	u935
   852  0167  0850               	movf	_GetPoint,w
   853  0168  0258               	subwf	_ZeroX,w
   854  0169                     u935:
   855  0169  1C03               	skipc
   856  016A  296C               	goto	u931
   857  016B  296D               	goto	u930
   858  016C                     u931:
   859  016C  2973               	goto	l76
   860  016D                     u930:
   861  016D                     l1094:
   862                           
   863                           ;main.c: 96: (Triac &= ~(1 << 0));
   864  016D  30FE               	movlw	254
   865  016E  1283               	bcf	3,5	;RP0=0, select bank0
   866  016F  05CA               	andwf	_Triac,f
   867  0170  30FF               	movlw	255
   868  0171  05CB               	andwf	_Triac+1,f
   869                           
   870                           ;main.c: 97: } else {
   871  0172  2877               	goto	l1048
   872  0173                     l76:
   873                           
   874                           ;main.c: 98: (Triac |= 1 << 0);
   875  0173  1283               	bcf	3,5	;RP0=0, select bank0
   876  0174  144A               	bsf	_Triac,0
   877  0175  2877               	goto	l1048
   878  0176                     l1096:
   879                           
   880                           ;main.c: 102: if (ZeroX > 0) {
   881  0176  0859               	movf	_ZeroX+1,w
   882  0177  3A80               	xorlw	128
   883  0178  00DF               	movwf	btemp+1
   884  0179  3080               	movlw	128
   885  017A  025F               	subwf	btemp+1,w
   886  017B  1D03               	skipz
   887  017C  297F               	goto	u945
   888  017D  3001               	movlw	1
   889  017E  0258               	subwf	_ZeroX,w
   890  017F                     u945:
   891  017F  1C03               	skipc
   892  0180  2982               	goto	u941
   893  0181  2983               	goto	u940
   894  0182                     u941:
   895  0182  29B2               	goto	l1106
   896  0183                     u940:
   897  0183                     l1098:
   898                           
   899                           ;main.c: 103: GetPoint = ((EinX*100)/ZeroX);
   900  0183  1283               	bcf	3,5	;RP0=0, select bank0
   901  0184  0859               	movf	_ZeroX+1,w
   902  0185  00AB               	movwf	___awdiv@divisor+1
   903  0186  0858               	movf	_ZeroX,w
   904  0187  00AA               	movwf	___awdiv@divisor
   905  0188  0857               	movf	_EinX+1,w
   906  0189  00A5               	movwf	___wmul@multiplier+1
   907  018A  0856               	movf	_EinX,w
   908  018B  00A4               	movwf	___wmul@multiplier
   909  018C  3064               	movlw	100
   910  018D  00A6               	movwf	___wmul@multiplicand
   911  018E  3000               	movlw	0
   912  018F  00A7               	movwf	___wmul@multiplicand+1
   913  0190  23B3               	fcall	___wmul
   914  0191  1283               	bcf	3,5	;RP0=0, select bank0
   915  0192  0825               	movf	?___wmul+1,w
   916  0193  00AD               	movwf	___awdiv@dividend+1
   917  0194  0824               	movf	?___wmul,w
   918  0195  00AC               	movwf	___awdiv@dividend
   919  0196  2269               	fcall	___awdiv
   920  0197  1283               	bcf	3,5	;RP0=0, select bank0
   921  0198  082B               	movf	?___awdiv+1,w
   922  0199  00D1               	movwf	_GetPoint+1
   923  019A  082A               	movf	?___awdiv,w
   924  019B  00D0               	movwf	_GetPoint
   925  019C                     l1100:
   926                           
   927                           ;main.c: 104: if ((GetPoint > SetPoint) | (SetPoint == 0)) {
   928  019C  0853               	movf	_SetPoint+1,w
   929  019D  3A80               	xorlw	128
   930  019E  00C9               	movwf	??_main
   931  019F  0851               	movf	_GetPoint+1,w
   932  01A0  3A80               	xorlw	128
   933  01A1  0249               	subwf	??_main,w
   934  01A2  1D03               	skipz
   935  01A3  29A6               	goto	u955
   936  01A4  0850               	movf	_GetPoint,w
   937  01A5  0252               	subwf	_SetPoint,w
   938  01A6                     u955:
   939  01A6  1C03               	skipc
   940  01A7  29A9               	goto	u951
   941  01A8  29AA               	goto	u950
   942  01A9                     u951:
   943  01A9  296D               	goto	l1094
   944  01AA                     u950:
   945  01AA                     l1102:
   946  01AA  1283               	bcf	3,5	;RP0=0, select bank0
   947  01AB  0852               	movf	_SetPoint,w
   948  01AC  0453               	iorwf	_SetPoint+1,w
   949  01AD  1D03               	btfss	3,2
   950  01AE  29B0               	goto	u961
   951  01AF  29B1               	goto	u960
   952  01B0                     u961:
   953  01B0  2973               	goto	l76
   954  01B1                     u960:
   955  01B1  296D               	goto	l1094
   956  01B2                     l1106:
   957                           
   958                           ;main.c: 110: if (SetPoint > 0) {
   959  01B2  1283               	bcf	3,5	;RP0=0, select bank0
   960  01B3  0853               	movf	_SetPoint+1,w
   961  01B4  3A80               	xorlw	128
   962  01B5  00DF               	movwf	btemp+1
   963  01B6  3080               	movlw	128
   964  01B7  025F               	subwf	btemp+1,w
   965  01B8  1D03               	skipz
   966  01B9  29BC               	goto	u975
   967  01BA  3001               	movlw	1
   968  01BB  0252               	subwf	_SetPoint,w
   969  01BC                     u975:
   970  01BC  1C03               	skipc
   971  01BD  29BF               	goto	u971
   972  01BE  29C0               	goto	u970
   973  01BF                     u971:
   974  01BF  296D               	goto	l1094
   975  01C0                     u970:
   976  01C0  2973               	goto	l76
   977  01C1  280B               	ljmp	start
   978  01C2                     __end_of_main:
   979                           
   980                           	psect	text1
   981  01C2                     __ptext1:	
   982 ;; *************** function _readADC *****************
   983 ;; Defined at:
   984 ;;		line 121 in file "main.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;		None
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  Analog          4   37[BANK0 ] unsigned long 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  2   31[BANK0 ] int 
   991 ;; Registers used:
   992 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMMON   BANK0
   998 ;;      Params:         0       2
   999 ;;      Locals:         0       4
  1000 ;;      Temps:          0       4
  1001 ;;      Totals:         0      10
  1002 ;;Total ram usage:       10 bytes
  1003 ;; Hardware stack levels used: 1
  1004 ;; Hardware stack levels required when called: 2
  1005 ;; This function calls:
  1006 ;;		___lldiv
  1007 ;;		___lmul
  1008 ;; This function is called by:
  1009 ;;		_main
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           
  1014                           ;psect for function _readADC
  1015  01C2                     _readADC:
  1016  01C2                     l950:	
  1017                           ;incstack = 0
  1018                           ; Regs used in _readADC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1019                           
  1020                           
  1021                           ;main.c: 123: unsigned long int Analog;;main.c: 124: GO = 1;
  1022  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1023  01C3  149F               	bsf	31,1	;volatile
  1024  01C4                     l92:	
  1025                           ;main.c: 125: while (GO) continue;
  1026                           
  1027  01C4  189F               	btfsc	31,1	;volatile
  1028  01C5  29C7               	goto	u641
  1029  01C6  29C8               	goto	u640
  1030  01C7                     u641:
  1031  01C7  29C4               	goto	l92
  1032  01C8                     u640:
  1033  01C8                     l952:
  1034                           
  1035                           ;main.c: 126: Analog=(ADRESL + (ADRESH<<8));
  1036  01C8  081E               	movf	30,w	;volatile
  1037  01C9  00C1               	movwf	??_readADC
  1038  01CA  01C2               	clrf	??_readADC+1
  1039  01CB  0841               	movf	??_readADC,w
  1040  01CC  00C2               	movwf	??_readADC+1
  1041  01CD  01C1               	clrf	??_readADC
  1042  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  1043  01CF  081E               	movf	30,w	;volatile
  1044  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1045  01D1  0741               	addwf	??_readADC,w
  1046  01D2  00C5               	movwf	readADC@Analog
  1047  01D3  0842               	movf	??_readADC+1,w
  1048  01D4  1803               	skipnc
  1049  01D5  0A42               	incf	??_readADC+1,w
  1050  01D6  00C6               	movwf	readADC@Analog+1
  1051  01D7  01C7               	clrf	readADC@Analog+2
  1052  01D8  1BC6               	btfsc	readADC@Analog+1,7
  1053  01D9  03C7               	decf	readADC@Analog+2,f
  1054  01DA  0847               	movf	readADC@Analog+2,w
  1055  01DB  00C8               	movwf	readADC@Analog+3
  1056  01DC                     l954:
  1057                           
  1058                           ;main.c: 127: if (Analog <= 500) {
  1059  01DC  0848               	movf	readADC@Analog+3,w
  1060  01DD  1D03               	btfss	3,2
  1061  01DE  29ED               	goto	u651
  1062  01DF  0847               	movf	readADC@Analog+2,w
  1063  01E0  1D03               	btfss	3,2
  1064  01E1  29ED               	goto	u651
  1065  01E2  3001               	movlw	1
  1066  01E3  0246               	subwf	readADC@Analog+1,w
  1067  01E4  1D03               	skipz
  1068  01E5  29EA               	goto	u653
  1069  01E6  30F5               	movlw	245
  1070  01E7  0245               	subwf	readADC@Analog,w
  1071  01E8  1D03               	skipz
  1072  01E9  29EA               	goto	u653
  1073  01EA                     u653:
  1074  01EA  1803               	btfsc	3,0
  1075  01EB  29ED               	goto	u651
  1076  01EC  29EE               	goto	u650
  1077  01ED                     u651:
  1078  01ED  29F8               	goto	l958
  1079  01EE                     u650:
  1080  01EE                     l956:
  1081                           
  1082                           ;main.c: 128: Analog = 0;
  1083  01EE  3000               	movlw	0
  1084  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  1085  01F0  00C8               	movwf	readADC@Analog+3
  1086  01F1  3000               	movlw	0
  1087  01F2  00C7               	movwf	readADC@Analog+2
  1088  01F3  3000               	movlw	0
  1089  01F4  00C6               	movwf	readADC@Analog+1
  1090  01F5  3000               	movlw	0
  1091  01F6  00C5               	movwf	readADC@Analog
  1092                           
  1093                           ;main.c: 129: } else if (Analog >= 800) {
  1094  01F7  2A38               	goto	l964
  1095  01F8                     l958:
  1096  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1097  01F9  0848               	movf	readADC@Analog+3,w
  1098  01FA  1D03               	btfss	3,2
  1099  01FB  2A0B               	goto	u660
  1100  01FC  0847               	movf	readADC@Analog+2,w
  1101  01FD  1D03               	btfss	3,2
  1102  01FE  2A0B               	goto	u660
  1103  01FF  3003               	movlw	3
  1104  0200  0246               	subwf	readADC@Analog+1,w
  1105  0201  1D03               	skipz
  1106  0202  2A07               	goto	u663
  1107  0203  3020               	movlw	32
  1108  0204  0245               	subwf	readADC@Analog,w
  1109  0205  1D03               	skipz
  1110  0206  2A07               	goto	u663
  1111  0207                     u663:
  1112  0207  1C03               	btfss	3,0
  1113  0208  2A0A               	goto	u661
  1114  0209  2A0B               	goto	u660
  1115  020A                     u661:
  1116  020A  2A15               	goto	l962
  1117  020B                     u660:
  1118  020B                     l960:
  1119                           
  1120                           ;main.c: 130: Analog = 800 - 500;
  1121  020B  3000               	movlw	0
  1122  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1123  020D  00C8               	movwf	readADC@Analog+3
  1124  020E  3000               	movlw	0
  1125  020F  00C7               	movwf	readADC@Analog+2
  1126  0210  3001               	movlw	1
  1127  0211  00C6               	movwf	readADC@Analog+1
  1128  0212  302C               	movlw	44
  1129  0213  00C5               	movwf	readADC@Analog
  1130                           
  1131                           ;main.c: 131: } else {
  1132  0214  2A38               	goto	l964
  1133  0215                     l962:
  1134                           
  1135                           ;main.c: 132: Analog = Analog - 500;
  1136  0215  300C               	movlw	12
  1137  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1138  0217  00C1               	movwf	??_readADC
  1139  0218  30FE               	movlw	254
  1140  0219  00C2               	movwf	??_readADC+1
  1141  021A  30FF               	movlw	255
  1142  021B  00C3               	movwf	??_readADC+2
  1143  021C  30FF               	movlw	255
  1144  021D  00C4               	movwf	??_readADC+3
  1145  021E  0845               	movf	readADC@Analog,w
  1146  021F  07C1               	addwf	??_readADC,f
  1147  0220  0846               	movf	readADC@Analog+1,w
  1148  0221  1803               	skipnc
  1149  0222  0F46               	incfsz	readADC@Analog+1,w
  1150  0223  2A25               	goto	u670
  1151  0224  2A26               	goto	u671
  1152  0225                     u670:
  1153  0225  07C2               	addwf	??_readADC+1,f
  1154  0226                     u671:
  1155  0226  0847               	movf	readADC@Analog+2,w
  1156  0227  1803               	skipnc
  1157  0228  0F47               	incfsz	readADC@Analog+2,w
  1158  0229  2A2B               	goto	u672
  1159  022A  2A2C               	goto	u673
  1160  022B                     u672:
  1161  022B  07C3               	addwf	??_readADC+2,f
  1162  022C                     u673:
  1163  022C  0848               	movf	readADC@Analog+3,w
  1164  022D  1803               	skipnc
  1165  022E  0A48               	incf	readADC@Analog+3,w
  1166  022F  07C4               	addwf	??_readADC+3,f
  1167  0230  0844               	movf	??_readADC+3,w
  1168  0231  00C8               	movwf	readADC@Analog+3
  1169  0232  0843               	movf	??_readADC+2,w
  1170  0233  00C7               	movwf	readADC@Analog+2
  1171  0234  0842               	movf	??_readADC+1,w
  1172  0235  00C6               	movwf	readADC@Analog+1
  1173  0236  0841               	movf	??_readADC,w
  1174  0237  00C5               	movwf	readADC@Analog
  1175  0238                     l964:
  1176                           
  1177                           ;main.c: 133: };main.c: 134: Analog = (Analog * 100)/(800 - 500);
  1178  0238  3000               	movlw	0
  1179  0239  00B4               	movwf	___lldiv@divisor+3
  1180  023A  3000               	movlw	0
  1181  023B  00B3               	movwf	___lldiv@divisor+2
  1182  023C  3001               	movlw	1
  1183  023D  00B2               	movwf	___lldiv@divisor+1
  1184  023E  302C               	movlw	44
  1185  023F  00B1               	movwf	___lldiv@divisor
  1186  0240  0848               	movf	readADC@Analog+3,w
  1187  0241  00A7               	movwf	___lmul@multiplier+3
  1188  0242  0847               	movf	readADC@Analog+2,w
  1189  0243  00A6               	movwf	___lmul@multiplier+2
  1190  0244  0846               	movf	readADC@Analog+1,w
  1191  0245  00A5               	movwf	___lmul@multiplier+1
  1192  0246  0845               	movf	readADC@Analog,w
  1193  0247  00A4               	movwf	___lmul@multiplier
  1194  0248  3000               	movlw	0
  1195  0249  00AB               	movwf	___lmul@multiplicand+3
  1196  024A  3000               	movlw	0
  1197  024B  00AA               	movwf	___lmul@multiplicand+2
  1198  024C  3000               	movlw	0
  1199  024D  00A9               	movwf	___lmul@multiplicand+1
  1200  024E  3064               	movlw	100
  1201  024F  00A8               	movwf	___lmul@multiplicand
  1202  0250  2338               	fcall	___lmul
  1203  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1204  0252  0827               	movf	?___lmul+3,w
  1205  0253  00B8               	movwf	___lldiv@dividend+3
  1206  0254  0826               	movf	?___lmul+2,w
  1207  0255  00B7               	movwf	___lldiv@dividend+2
  1208  0256  0825               	movf	?___lmul+1,w
  1209  0257  00B6               	movwf	___lldiv@dividend+1
  1210  0258  0824               	movf	?___lmul,w
  1211  0259  00B5               	movwf	___lldiv@dividend
  1212  025A  22D1               	fcall	___lldiv
  1213  025B  1283               	bcf	3,5	;RP0=0, select bank0
  1214  025C  0834               	movf	?___lldiv+3,w
  1215  025D  00C8               	movwf	readADC@Analog+3
  1216  025E  0833               	movf	?___lldiv+2,w
  1217  025F  00C7               	movwf	readADC@Analog+2
  1218  0260  0832               	movf	?___lldiv+1,w
  1219  0261  00C6               	movwf	readADC@Analog+1
  1220  0262  0831               	movf	?___lldiv,w
  1221  0263  00C5               	movwf	readADC@Analog
  1222  0264                     l966:
  1223                           
  1224                           ;main.c: 135: return Analog;
  1225  0264  0846               	movf	readADC@Analog+1,w
  1226  0265  00C0               	movwf	?_readADC+1
  1227  0266  0845               	movf	readADC@Analog,w
  1228  0267  00BF               	movwf	?_readADC
  1229  0268                     l99:
  1230  0268  0008               	return
  1231  0269                     __end_of_readADC:
  1232                           
  1233                           	psect	text2
  1234  0338                     __ptext2:	
  1235 ;; *************** function ___lmul *****************
  1236 ;; Defined at:
  1237 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul32.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;  multiplier      4    4[BANK0 ] unsigned long 
  1240 ;;  multiplicand    4    8[BANK0 ] unsigned long 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  product         4   13[BANK0 ] unsigned long 
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  4    4[BANK0 ] unsigned long 
  1245 ;; Registers used:
  1246 ;;		wreg, status,2, status,0
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMMON   BANK0
  1252 ;;      Params:         0       8
  1253 ;;      Locals:         0       4
  1254 ;;      Temps:          0       1
  1255 ;;      Totals:         0      13
  1256 ;;Total ram usage:       13 bytes
  1257 ;; Hardware stack levels used: 1
  1258 ;; Hardware stack levels required when called: 1
  1259 ;; This function calls:
  1260 ;;		Nothing
  1261 ;; This function is called by:
  1262 ;;		_readADC
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           
  1267                           ;psect for function ___lmul
  1268  0338                     ___lmul:
  1269  0338                     l912:	
  1270                           ;incstack = 0
  1271                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1272                           
  1273  0338  3000               	movlw	0
  1274  0339  1283               	bcf	3,5	;RP0=0, select bank0
  1275  033A  00B0               	movwf	___lmul@product+3
  1276  033B  3000               	movlw	0
  1277  033C  00AF               	movwf	___lmul@product+2
  1278  033D  3000               	movlw	0
  1279  033E  00AE               	movwf	___lmul@product+1
  1280  033F  3000               	movlw	0
  1281  0340  00AD               	movwf	___lmul@product
  1282  0341                     l914:
  1283  0341  1C24               	btfss	___lmul@multiplier,0
  1284  0342  2B44               	goto	u521
  1285  0343  2B45               	goto	u520
  1286  0344                     u521:
  1287  0344  2B5C               	goto	l918
  1288  0345                     u520:
  1289  0345                     l916:
  1290  0345  0828               	movf	___lmul@multiplicand,w
  1291  0346  07AD               	addwf	___lmul@product,f
  1292  0347  0829               	movf	___lmul@multiplicand+1,w
  1293  0348  1103               	clrz
  1294  0349  1803               	skipnc
  1295  034A  3E01               	addlw	1
  1296  034B  1903               	skipnz
  1297  034C  2B4E               	goto	u531
  1298  034D  07AE               	addwf	___lmul@product+1,f
  1299  034E                     u531:
  1300  034E  082A               	movf	___lmul@multiplicand+2,w
  1301  034F  1103               	clrz
  1302  0350  1803               	skipnc
  1303  0351  3E01               	addlw	1
  1304  0352  1903               	skipnz
  1305  0353  2B55               	goto	u532
  1306  0354  07AF               	addwf	___lmul@product+2,f
  1307  0355                     u532:
  1308  0355  082B               	movf	___lmul@multiplicand+3,w
  1309  0356  1103               	clrz
  1310  0357  1803               	skipnc
  1311  0358  3E01               	addlw	1
  1312  0359  1903               	skipnz
  1313  035A  2B5C               	goto	u533
  1314  035B  07B0               	addwf	___lmul@product+3,f
  1315  035C                     u533:
  1316  035C                     l918:
  1317  035C  3001               	movlw	1
  1318  035D  00AC               	movwf	??___lmul
  1319  035E                     u545:
  1320  035E  1003               	clrc
  1321  035F  0DA8               	rlf	___lmul@multiplicand,f
  1322  0360  0DA9               	rlf	___lmul@multiplicand+1,f
  1323  0361  0DAA               	rlf	___lmul@multiplicand+2,f
  1324  0362  0DAB               	rlf	___lmul@multiplicand+3,f
  1325  0363  0BAC               	decfsz	??___lmul,f
  1326  0364  2B5E               	goto	u545
  1327  0365                     l920:
  1328  0365  3001               	movlw	1
  1329  0366                     u555:
  1330  0366  1003               	clrc
  1331  0367  0CA7               	rrf	___lmul@multiplier+3,f
  1332  0368  0CA6               	rrf	___lmul@multiplier+2,f
  1333  0369  0CA5               	rrf	___lmul@multiplier+1,f
  1334  036A  0CA4               	rrf	___lmul@multiplier,f
  1335  036B  3EFF               	addlw	-1
  1336  036C  1D03               	skipz
  1337  036D  2B66               	goto	u555
  1338  036E  0827               	movf	___lmul@multiplier+3,w
  1339  036F  0426               	iorwf	___lmul@multiplier+2,w
  1340  0370  0425               	iorwf	___lmul@multiplier+1,w
  1341  0371  0424               	iorwf	___lmul@multiplier,w
  1342  0372  1D03               	skipz
  1343  0373  2B75               	goto	u561
  1344  0374  2B76               	goto	u560
  1345  0375                     u561:
  1346  0375  2B41               	goto	l914
  1347  0376                     u560:
  1348  0376                     l922:
  1349  0376  0830               	movf	___lmul@product+3,w
  1350  0377  00A7               	movwf	?___lmul+3
  1351  0378  082F               	movf	___lmul@product+2,w
  1352  0379  00A6               	movwf	?___lmul+2
  1353  037A  082E               	movf	___lmul@product+1,w
  1354  037B  00A5               	movwf	?___lmul+1
  1355  037C  082D               	movf	___lmul@product,w
  1356  037D  00A4               	movwf	?___lmul
  1357  037E                     l206:
  1358  037E  0008               	return
  1359  037F                     __end_of___lmul:
  1360                           
  1361                           	psect	text3
  1362  02D1                     __ptext3:	
  1363 ;; *************** function ___lldiv *****************
  1364 ;; Defined at:
  1365 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\__lldiv.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  divisor         4   17[BANK0 ] unsigned long 
  1368 ;;  dividend        4   21[BANK0 ] unsigned long 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  quotient        4   26[BANK0 ] unsigned long 
  1371 ;;  counter         1   30[BANK0 ] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  4   17[BANK0 ] unsigned long 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMMON   BANK0
  1381 ;;      Params:         0       8
  1382 ;;      Locals:         0       5
  1383 ;;      Temps:          0       1
  1384 ;;      Totals:         0      14
  1385 ;;Total ram usage:       14 bytes
  1386 ;; Hardware stack levels used: 1
  1387 ;; Hardware stack levels required when called: 1
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_readADC
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           
  1396                           ;psect for function ___lldiv
  1397  02D1                     ___lldiv:
  1398  02D1                     l926:	
  1399                           ;incstack = 0
  1400                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1401                           
  1402  02D1  3000               	movlw	0
  1403  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  1404  02D3  00BD               	movwf	___lldiv@quotient+3
  1405  02D4  3000               	movlw	0
  1406  02D5  00BC               	movwf	___lldiv@quotient+2
  1407  02D6  3000               	movlw	0
  1408  02D7  00BB               	movwf	___lldiv@quotient+1
  1409  02D8  3000               	movlw	0
  1410  02D9  00BA               	movwf	___lldiv@quotient
  1411  02DA  0834               	movf	___lldiv@divisor+3,w
  1412  02DB  0433               	iorwf	___lldiv@divisor+2,w
  1413  02DC  0432               	iorwf	___lldiv@divisor+1,w
  1414  02DD  0431               	iorwf	___lldiv@divisor,w
  1415  02DE  1903               	skipnz
  1416  02DF  2AE1               	goto	u571
  1417  02E0  2AE2               	goto	u570
  1418  02E1                     u571:
  1419  02E1  2B2F               	goto	l946
  1420  02E2                     u570:
  1421  02E2                     l928:
  1422  02E2  01BE               	clrf	___lldiv@counter
  1423  02E3  0ABE               	incf	___lldiv@counter,f
  1424  02E4  2AF2               	goto	l932
  1425  02E5                     l930:
  1426  02E5  3001               	movlw	1
  1427  02E6  00B9               	movwf	??___lldiv
  1428  02E7                     u585:
  1429  02E7  1003               	clrc
  1430  02E8  0DB1               	rlf	___lldiv@divisor,f
  1431  02E9  0DB2               	rlf	___lldiv@divisor+1,f
  1432  02EA  0DB3               	rlf	___lldiv@divisor+2,f
  1433  02EB  0DB4               	rlf	___lldiv@divisor+3,f
  1434  02EC  0BB9               	decfsz	??___lldiv,f
  1435  02ED  2AE7               	goto	u585
  1436  02EE  3001               	movlw	1
  1437  02EF  00B9               	movwf	??___lldiv
  1438  02F0  0839               	movf	??___lldiv,w
  1439  02F1  07BE               	addwf	___lldiv@counter,f
  1440  02F2                     l932:
  1441  02F2  1FB4               	btfss	___lldiv@divisor+3,7
  1442  02F3  2AF5               	goto	u591
  1443  02F4  2AF6               	goto	u590
  1444  02F5                     u591:
  1445  02F5  2AE5               	goto	l930
  1446  02F6                     u590:
  1447  02F6                     l934:
  1448  02F6  3001               	movlw	1
  1449  02F7  00B9               	movwf	??___lldiv
  1450  02F8                     u605:
  1451  02F8  1003               	clrc
  1452  02F9  0DBA               	rlf	___lldiv@quotient,f
  1453  02FA  0DBB               	rlf	___lldiv@quotient+1,f
  1454  02FB  0DBC               	rlf	___lldiv@quotient+2,f
  1455  02FC  0DBD               	rlf	___lldiv@quotient+3,f
  1456  02FD  0BB9               	decfsz	??___lldiv,f
  1457  02FE  2AF8               	goto	u605
  1458  02FF                     l936:
  1459  02FF  0834               	movf	___lldiv@divisor+3,w
  1460  0300  0238               	subwf	___lldiv@dividend+3,w
  1461  0301  1D03               	skipz
  1462  0302  2B0D               	goto	u615
  1463  0303  0833               	movf	___lldiv@divisor+2,w
  1464  0304  0237               	subwf	___lldiv@dividend+2,w
  1465  0305  1D03               	skipz
  1466  0306  2B0D               	goto	u615
  1467  0307  0832               	movf	___lldiv@divisor+1,w
  1468  0308  0236               	subwf	___lldiv@dividend+1,w
  1469  0309  1D03               	skipz
  1470  030A  2B0D               	goto	u615
  1471  030B  0831               	movf	___lldiv@divisor,w
  1472  030C  0235               	subwf	___lldiv@dividend,w
  1473  030D                     u615:
  1474  030D  1C03               	skipc
  1475  030E  2B10               	goto	u611
  1476  030F  2B11               	goto	u610
  1477  0310                     u611:
  1478  0310  2B20               	goto	l942
  1479  0311                     u610:
  1480  0311                     l938:
  1481  0311  0831               	movf	___lldiv@divisor,w
  1482  0312  02B5               	subwf	___lldiv@dividend,f
  1483  0313  0832               	movf	___lldiv@divisor+1,w
  1484  0314  1C03               	skipc
  1485  0315  0F32               	incfsz	___lldiv@divisor+1,w
  1486  0316  02B6               	subwf	___lldiv@dividend+1,f
  1487  0317  0833               	movf	___lldiv@divisor+2,w
  1488  0318  1C03               	skipc
  1489  0319  0F33               	incfsz	___lldiv@divisor+2,w
  1490  031A  02B7               	subwf	___lldiv@dividend+2,f
  1491  031B  0834               	movf	___lldiv@divisor+3,w
  1492  031C  1C03               	skipc
  1493  031D  0F34               	incfsz	___lldiv@divisor+3,w
  1494  031E  02B8               	subwf	___lldiv@dividend+3,f
  1495  031F                     l940:
  1496  031F  143A               	bsf	___lldiv@quotient,0
  1497  0320                     l942:
  1498  0320  3001               	movlw	1
  1499  0321                     u625:
  1500  0321  1003               	clrc
  1501  0322  0CB4               	rrf	___lldiv@divisor+3,f
  1502  0323  0CB3               	rrf	___lldiv@divisor+2,f
  1503  0324  0CB2               	rrf	___lldiv@divisor+1,f
  1504  0325  0CB1               	rrf	___lldiv@divisor,f
  1505  0326  3EFF               	addlw	-1
  1506  0327  1D03               	skipz
  1507  0328  2B21               	goto	u625
  1508  0329                     l944:
  1509  0329  3001               	movlw	1
  1510  032A  02BE               	subwf	___lldiv@counter,f
  1511  032B  1D03               	btfss	3,2
  1512  032C  2B2E               	goto	u631
  1513  032D  2B2F               	goto	u630
  1514  032E                     u631:
  1515  032E  2AF6               	goto	l934
  1516  032F                     u630:
  1517  032F                     l946:
  1518  032F  083D               	movf	___lldiv@quotient+3,w
  1519  0330  00B4               	movwf	?___lldiv+3
  1520  0331  083C               	movf	___lldiv@quotient+2,w
  1521  0332  00B3               	movwf	?___lldiv+2
  1522  0333  083B               	movf	___lldiv@quotient+1,w
  1523  0334  00B2               	movwf	?___lldiv+1
  1524  0335  083A               	movf	___lldiv@quotient,w
  1525  0336  00B1               	movwf	?___lldiv
  1526  0337                     l228:
  1527  0337  0008               	return
  1528  0338                     __end_of___lldiv:
  1529                           
  1530                           	psect	text4
  1531  03B3                     __ptext4:	
  1532 ;; *************** function ___wmul *****************
  1533 ;; Defined at:
  1534 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  multiplier      2    4[BANK0 ] unsigned int 
  1537 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  product         2    8[BANK0 ] unsigned int 
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  2    4[BANK0 ] unsigned int 
  1542 ;; Registers used:
  1543 ;;		wreg, status,2, status,0
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMMON   BANK0
  1549 ;;      Params:         0       4
  1550 ;;      Locals:         0       2
  1551 ;;      Temps:          0       0
  1552 ;;      Totals:         0       6
  1553 ;;Total ram usage:        6 bytes
  1554 ;; Hardware stack levels used: 1
  1555 ;; Hardware stack levels required when called: 1
  1556 ;; This function calls:
  1557 ;;		Nothing
  1558 ;; This function is called by:
  1559 ;;		_main
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           
  1564                           ;psect for function ___wmul
  1565  03B3                     ___wmul:
  1566  03B3                     l970:	
  1567                           ;incstack = 0
  1568                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1569                           
  1570  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  1571  03B4  01A8               	clrf	___wmul@product
  1572  03B5  01A9               	clrf	___wmul@product+1
  1573  03B6                     l972:
  1574  03B6  1C24               	btfss	___wmul@multiplier,0
  1575  03B7  2BB9               	goto	u681
  1576  03B8  2BBA               	goto	u680
  1577  03B9                     u681:
  1578  03B9  2BC0               	goto	l192
  1579  03BA                     u680:
  1580  03BA                     l974:
  1581  03BA  0826               	movf	___wmul@multiplicand,w
  1582  03BB  07A8               	addwf	___wmul@product,f
  1583  03BC  1803               	skipnc
  1584  03BD  0AA9               	incf	___wmul@product+1,f
  1585  03BE  0827               	movf	___wmul@multiplicand+1,w
  1586  03BF  07A9               	addwf	___wmul@product+1,f
  1587  03C0                     l192:
  1588  03C0  3001               	movlw	1
  1589  03C1                     u695:
  1590  03C1  1003               	clrc
  1591  03C2  0DA6               	rlf	___wmul@multiplicand,f
  1592  03C3  0DA7               	rlf	___wmul@multiplicand+1,f
  1593  03C4  3EFF               	addlw	-1
  1594  03C5  1D03               	skipz
  1595  03C6  2BC1               	goto	u695
  1596  03C7                     l976:
  1597  03C7  3001               	movlw	1
  1598  03C8                     u705:
  1599  03C8  1003               	clrc
  1600  03C9  0CA5               	rrf	___wmul@multiplier+1,f
  1601  03CA  0CA4               	rrf	___wmul@multiplier,f
  1602  03CB  3EFF               	addlw	-1
  1603  03CC  1D03               	skipz
  1604  03CD  2BC8               	goto	u705
  1605  03CE                     l978:
  1606  03CE  0824               	movf	___wmul@multiplier,w
  1607  03CF  0425               	iorwf	___wmul@multiplier+1,w
  1608  03D0  1D03               	btfss	3,2
  1609  03D1  2BD3               	goto	u711
  1610  03D2  2BD4               	goto	u710
  1611  03D3                     u711:
  1612  03D3  2BB6               	goto	l972
  1613  03D4                     u710:
  1614  03D4                     l980:
  1615  03D4  0829               	movf	___wmul@product+1,w
  1616  03D5  00A5               	movwf	?___wmul+1
  1617  03D6  0828               	movf	___wmul@product,w
  1618  03D7  00A4               	movwf	?___wmul
  1619  03D8                     l194:
  1620  03D8  0008               	return
  1621  03D9                     __end_of___wmul:
  1622                           
  1623                           	psect	text5
  1624  0269                     __ptext5:	
  1625 ;; *************** function ___awdiv *****************
  1626 ;; Defined at:
  1627 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  divisor         2   10[BANK0 ] int 
  1630 ;;  dividend        2   12[BANK0 ] int 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  quotient        2   17[BANK0 ] int 
  1633 ;;  sign            1   16[BANK0 ] unsigned char 
  1634 ;;  counter         1   15[BANK0 ] unsigned char 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  2   10[BANK0 ] int 
  1637 ;; Registers used:
  1638 ;;		wreg, status,2, status,0
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMMON   BANK0
  1644 ;;      Params:         0       4
  1645 ;;      Locals:         0       4
  1646 ;;      Temps:          0       1
  1647 ;;      Totals:         0       9
  1648 ;;Total ram usage:        9 bytes
  1649 ;; Hardware stack levels used: 1
  1650 ;; Hardware stack levels required when called: 1
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_main
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           
  1659                           ;psect for function ___awdiv
  1660  0269                     ___awdiv:
  1661  0269                     l984:	
  1662                           ;incstack = 0
  1663                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1664                           
  1665  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1666  026A  01B0               	clrf	___awdiv@sign
  1667  026B                     l986:
  1668  026B  1FAB               	btfss	___awdiv@divisor+1,7
  1669  026C  2A6E               	goto	u721
  1670  026D  2A6F               	goto	u720
  1671  026E                     u721:
  1672  026E  2A76               	goto	l992
  1673  026F                     u720:
  1674  026F                     l988:
  1675  026F  09AA               	comf	___awdiv@divisor,f
  1676  0270  09AB               	comf	___awdiv@divisor+1,f
  1677  0271  0AAA               	incf	___awdiv@divisor,f
  1678  0272  1903               	skipnz
  1679  0273  0AAB               	incf	___awdiv@divisor+1,f
  1680  0274                     l990:
  1681  0274  01B0               	clrf	___awdiv@sign
  1682  0275  0AB0               	incf	___awdiv@sign,f
  1683  0276                     l992:
  1684  0276  1FAD               	btfss	___awdiv@dividend+1,7
  1685  0277  2A79               	goto	u731
  1686  0278  2A7A               	goto	u730
  1687  0279                     u731:
  1688  0279  2A83               	goto	l998
  1689  027A                     u730:
  1690  027A                     l994:
  1691  027A  09AC               	comf	___awdiv@dividend,f
  1692  027B  09AD               	comf	___awdiv@dividend+1,f
  1693  027C  0AAC               	incf	___awdiv@dividend,f
  1694  027D  1903               	skipnz
  1695  027E  0AAD               	incf	___awdiv@dividend+1,f
  1696  027F                     l996:
  1697  027F  3001               	movlw	1
  1698  0280  00AE               	movwf	??___awdiv
  1699  0281  082E               	movf	??___awdiv,w
  1700  0282  06B0               	xorwf	___awdiv@sign,f
  1701  0283                     l998:
  1702  0283  01B1               	clrf	___awdiv@quotient
  1703  0284  01B2               	clrf	___awdiv@quotient+1
  1704  0285                     l1000:
  1705  0285  082A               	movf	___awdiv@divisor,w
  1706  0286  042B               	iorwf	___awdiv@divisor+1,w
  1707  0287  1903               	btfsc	3,2
  1708  0288  2A8A               	goto	u741
  1709  0289  2A8B               	goto	u740
  1710  028A                     u741:
  1711  028A  2AC2               	goto	l1020
  1712  028B                     u740:
  1713  028B                     l1002:
  1714  028B  01AF               	clrf	___awdiv@counter
  1715  028C  0AAF               	incf	___awdiv@counter,f
  1716  028D  2A99               	goto	l1008
  1717  028E                     l1004:
  1718  028E  3001               	movlw	1
  1719  028F                     u755:
  1720  028F  1003               	clrc
  1721  0290  0DAA               	rlf	___awdiv@divisor,f
  1722  0291  0DAB               	rlf	___awdiv@divisor+1,f
  1723  0292  3EFF               	addlw	-1
  1724  0293  1D03               	skipz
  1725  0294  2A8F               	goto	u755
  1726  0295                     l1006:
  1727  0295  3001               	movlw	1
  1728  0296  00AE               	movwf	??___awdiv
  1729  0297  082E               	movf	??___awdiv,w
  1730  0298  07AF               	addwf	___awdiv@counter,f
  1731  0299                     l1008:
  1732  0299  1FAB               	btfss	___awdiv@divisor+1,7
  1733  029A  2A9C               	goto	u761
  1734  029B  2A9D               	goto	u760
  1735  029C                     u761:
  1736  029C  2A8E               	goto	l1004
  1737  029D                     u760:
  1738  029D                     l1010:
  1739  029D  3001               	movlw	1
  1740  029E                     u775:
  1741  029E  1003               	clrc
  1742  029F  0DB1               	rlf	___awdiv@quotient,f
  1743  02A0  0DB2               	rlf	___awdiv@quotient+1,f
  1744  02A1  3EFF               	addlw	-1
  1745  02A2  1D03               	skipz
  1746  02A3  2A9E               	goto	u775
  1747  02A4  082B               	movf	___awdiv@divisor+1,w
  1748  02A5  022D               	subwf	___awdiv@dividend+1,w
  1749  02A6  1D03               	skipz
  1750  02A7  2AAA               	goto	u785
  1751  02A8  082A               	movf	___awdiv@divisor,w
  1752  02A9  022C               	subwf	___awdiv@dividend,w
  1753  02AA                     u785:
  1754  02AA  1C03               	skipc
  1755  02AB  2AAD               	goto	u781
  1756  02AC  2AAE               	goto	u780
  1757  02AD                     u781:
  1758  02AD  2AB5               	goto	l1016
  1759  02AE                     u780:
  1760  02AE                     l1012:
  1761  02AE  082A               	movf	___awdiv@divisor,w
  1762  02AF  02AC               	subwf	___awdiv@dividend,f
  1763  02B0  082B               	movf	___awdiv@divisor+1,w
  1764  02B1  1C03               	skipc
  1765  02B2  03AD               	decf	___awdiv@dividend+1,f
  1766  02B3  02AD               	subwf	___awdiv@dividend+1,f
  1767  02B4                     l1014:
  1768  02B4  1431               	bsf	___awdiv@quotient,0
  1769  02B5                     l1016:
  1770  02B5  3001               	movlw	1
  1771  02B6                     u795:
  1772  02B6  1003               	clrc
  1773  02B7  0CAB               	rrf	___awdiv@divisor+1,f
  1774  02B8  0CAA               	rrf	___awdiv@divisor,f
  1775  02B9  3EFF               	addlw	-1
  1776  02BA  1D03               	skipz
  1777  02BB  2AB6               	goto	u795
  1778  02BC                     l1018:
  1779  02BC  3001               	movlw	1
  1780  02BD  02AF               	subwf	___awdiv@counter,f
  1781  02BE  1D03               	btfss	3,2
  1782  02BF  2AC1               	goto	u801
  1783  02C0  2AC2               	goto	u800
  1784  02C1                     u801:
  1785  02C1  2A9D               	goto	l1010
  1786  02C2                     u800:
  1787  02C2                     l1020:
  1788  02C2  0830               	movf	___awdiv@sign,w
  1789  02C3  1903               	btfsc	3,2
  1790  02C4  2AC6               	goto	u811
  1791  02C5  2AC7               	goto	u810
  1792  02C6                     u811:
  1793  02C6  2ACC               	goto	l1024
  1794  02C7                     u810:
  1795  02C7                     l1022:
  1796  02C7  09B1               	comf	___awdiv@quotient,f
  1797  02C8  09B2               	comf	___awdiv@quotient+1,f
  1798  02C9  0AB1               	incf	___awdiv@quotient,f
  1799  02CA  1903               	skipnz
  1800  02CB  0AB2               	incf	___awdiv@quotient+1,f
  1801  02CC                     l1024:
  1802  02CC  0832               	movf	___awdiv@quotient+1,w
  1803  02CD  00AB               	movwf	?___awdiv+1
  1804  02CE  0831               	movf	___awdiv@quotient,w
  1805  02CF  00AA               	movwf	?___awdiv
  1806  02D0                     l345:
  1807  02D0  0008               	return
  1808  02D1                     __end_of___awdiv:
  1809                           
  1810                           	psect	text6
  1811  037F                     __ptext6:	
  1812 ;; *************** function _interruptOnChangeIsr *****************
  1813 ;; Defined at:
  1814 ;;		line 138 in file "main.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, status,0
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMMON   BANK0
  1828 ;;      Params:         0       0
  1829 ;;      Locals:         0       0
  1830 ;;      Temps:          0       4
  1831 ;;      Totals:         0       4
  1832 ;;Total ram usage:        4 bytes
  1833 ;; Hardware stack levels used: 1
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		Interrupt level 1
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _interruptOnChangeIsr
  1843  037F                     _interruptOnChangeIsr:
  1844  037F                     i1l1112:
  1845                           
  1846                           ;main.c: 139: irqPin = RA0;
  1847  037F  1003               	clrc
  1848  0380  1805               	btfsc	5,0	;volatile
  1849  0381  1403               	setc
  1850  0382  3000               	movlw	0
  1851  0383  1803               	skipnc
  1852  0384  3001               	movlw	1
  1853  0385  00A0               	movwf	??_interruptOnChangeIsr
  1854  0386  01A1               	clrf	??_interruptOnChangeIsr+1
  1855  0387  0820               	movf	??_interruptOnChangeIsr,w
  1856  0388  00D4               	movwf	_irqPin
  1857  0389  0821               	movf	??_interruptOnChangeIsr+1,w
  1858  038A  00D5               	movwf	_irqPin+1
  1859  038B                     i1l1114:
  1860                           
  1861                           ;main.c: 141: if (RAIF && RAIE) {
  1862  038B  1C0B               	btfss	11,0	;volatile
  1863  038C  2B8E               	goto	u98_21
  1864  038D  2B8F               	goto	u98_20
  1865  038E                     u98_21:
  1866  038E  2BAC               	goto	i1l106
  1867  038F                     u98_20:
  1868  038F                     i1l1116:
  1869  038F  1D8B               	btfss	11,3	;volatile
  1870  0390  2B92               	goto	u99_21
  1871  0391  2B93               	goto	u99_20
  1872  0392                     u99_21:
  1873  0392  2BAC               	goto	i1l106
  1874  0393                     u99_20:
  1875  0393                     i1l1118:
  1876                           
  1877                           ;main.c: 142: RAIF=0;
  1878  0393  100B               	bcf	11,0	;volatile
  1879                           
  1880                           ;main.c: 143: RC0=(Triac & (1 << 0));
  1881  0394  184A               	btfsc	_Triac,0
  1882  0395  2B97               	goto	u100_21
  1883  0396  2B9A               	goto	u100_20
  1884  0397                     u100_21:
  1885  0397  1283               	bcf	3,5	;RP0=0, select bank0
  1886  0398  1407               	bsf	7,0	;volatile
  1887  0399  2B9C               	goto	u101_24
  1888  039A                     u100_20:
  1889  039A  1283               	bcf	3,5	;RP0=0, select bank0
  1890  039B  1007               	bcf	7,0	;volatile
  1891  039C                     u101_24:
  1892  039C                     i1l1120:
  1893                           
  1894                           ;main.c: 144: ++ZeroX;
  1895  039C  3001               	movlw	1
  1896  039D  07D8               	addwf	_ZeroX,f
  1897  039E  1803               	skipnc
  1898  039F  0AD9               	incf	_ZeroX+1,f
  1899  03A0  3000               	movlw	0
  1900  03A1  07D9               	addwf	_ZeroX+1,f
  1901  03A2                     i1l1122:
  1902                           
  1903                           ;main.c: 145: if ((Triac & (1 << 0))) {
  1904  03A2  1C4A               	btfss	_Triac,0
  1905  03A3  2BA5               	goto	u102_21
  1906  03A4  2BA6               	goto	u102_20
  1907  03A5                     u102_21:
  1908  03A5  2BAC               	goto	i1l106
  1909  03A6                     u102_20:
  1910  03A6                     i1l1124:
  1911                           
  1912                           ;main.c: 146: ++EinX;
  1913  03A6  3001               	movlw	1
  1914  03A7  07D6               	addwf	_EinX,f
  1915  03A8  1803               	skipnc
  1916  03A9  0AD7               	incf	_EinX+1,f
  1917  03AA  3000               	movlw	0
  1918  03AB  07D7               	addwf	_EinX+1,f
  1919  03AC                     i1l106:
  1920  03AC  0823               	movf	??_interruptOnChangeIsr+3,w
  1921  03AD  008A               	movwf	10
  1922  03AE  0E22               	swapf	??_interruptOnChangeIsr+2,w
  1923  03AF  0083               	movwf	3
  1924  03B0  0EDE               	swapf	btemp,f
  1925  03B1  0E5E               	swapf	btemp,w
  1926  03B2  0009               	retfie
  1927  03B3                     __end_of_interruptOnChangeIsr:
  1928  005E                     btemp	set	94	;btemp
  1929  005E                     wtemp0	set	94
  1930                           
  1931                           	psect	intentry
  1932  0004                     __pintentry:	
  1933                           ;incstack = 0
  1934                           ; Regs used in _interruptOnChangeIsr: [wreg+status,0]
  1935                           
  1936  0004                     interrupt_function:
  1937  005E                     saved_w	set	btemp
  1938  0004  00DE               	movwf	btemp
  1939  0005  0E03               	swapf	3,w
  1940  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1941  0007  00A2               	movwf	??_interruptOnChangeIsr+2
  1942  0008  080A               	movf	10,w
  1943  0009  00A3               	movwf	??_interruptOnChangeIsr+3
  1944  000A  2B7F               	ljmp	_interruptOnChangeIsr
  1945                           
  1946                           	psect	config
  1947                           
  1948                           ;Config register CONFIG @ 0x2007
  1949                           ;	Oscillator Selection bits
  1950                           ;	FOSC = HS, HS oscillator: High speed crystal/resonator on RA4/OSC2/CLKOUT and RA5/OSC1
      +                          /CLKIN
  1951                           ;	Watchdog Timer Enable bit
  1952                           ;	WDTE = OFF, WDT disabled
  1953                           ;	Power-up Timer Enable bit
  1954                           ;	PWRTE = OFF, PWRT disabled
  1955                           ;	RA3/MCLR pin function select
  1956                           ;	MCLRE = ON, RA3/MCLR pin function is MCLR
  1957                           ;	Brown-out Detect Enable bit
  1958                           ;	BOREN = OFF, BOD disabled
  1959                           ;	Code Protection bit
  1960                           ;	CP = OFF, Program Memory code protection is disabled
  1961                           ;	Data Code Protection bit
  1962                           ;	CPD = OFF, Data memory code protection is disabled
  1963  2007                     	org	8199
  1964  2007  3FB2               	dw	16306

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     42      58

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _interruptOnChangeIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_readADC
    _readADC->___lldiv
    ___lldiv->___lmul
    ___awdiv->___wmul

Critical Paths under _interruptOnChangeIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2889
                                             41 BANK0      1     1      0
                            ___awdiv
                             ___wmul
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                             10     8      2     673
                                             31 BANK0     10     8      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     314
                                             17 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1004
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4    1212
                                             10 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptOnChangeIsr                                 4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _readADC
     ___lldiv
       ___lmul (ARG)
     ___lmul

 _interruptOnChangeIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E     2A      3A       4       93.5%
ABS                  0      0      3A       5        0.0%
DATA                 0      0      3A       6        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Jan 02 12:03:58 2022

                           l71 012F                             l73 0141                             l74 0143  
                           l92 01C4                             l76 0173                             _GO 00F9  
                           l99 0268                   ___awdiv@sign 0030                             fsr 0004  
          ___wmul@multiplicand 0026                            l206 037E                            l228 0337  
                          l192 03C0                            l345 02D0                            l194 03D8  
                          l920 0365                            l912 0338                            l930 02E5  
                          l922 0376                            l914 0341                            l940 031F  
                          l932 02F2                            l916 0345                            l942 0320  
                          l934 02F6                            l926 02D1                            l918 035C  
                          l950 01C2                            l944 0329                            l936 02FF  
                          l928 02E2                            l960 020B                            l952 01C8  
                          l970 03B3                            l938 0311                            l946 032F  
                          l962 0215                            l954 01DC                            l980 03D4  
                          l972 03B6                            l964 0238                            l956 01EE  
                          l990 0274                            l974 03BA                            l966 0264  
                          l958 01F8                            l992 0276                            l984 0269  
                          l976 03C7                            l994 027A                            l986 026B  
                          l978 03CE                            l996 027F                            l988 026F  
                          l998 0283                            _RA0 0028                            _RC0 0038  
                          _RC2 003A                            _RC3 003B                            _RC4 003C  
                          _RC5 003D                            u520 0345                            u521 0344  
                          u610 0311                            u611 0310                            u531 034E  
                          u532 0355                            u605 02F8                            u533 035C  
                          u710 03D4                            u630 032F                            u711 03D3  
                          u631 032E                            u615 030D                            u800 02C2  
                          u720 026F                            u560 0376                            u640 01C8  
                          u801 02C1                            u721 026E                            u705 03C8  
                          u625 0321                            u561 0375                            u545 035E  
                          u641 01C7                            u810 02C7                            u730 027A  
                          u570 02E2                            u650 01EE                            u811 02C6  
                          u731 0279                            u571 02E1                            u555 0366  
                          u651 01ED                            u740 028B                            u660 020B  
                          u900 012A                            u820 0031                            u741 028A  
                          u661 020A                            u653 01EA                            u901 0129  
                          u821 0030                            u590 02F6                            u670 0225  
                          u910 013E                            u830 0084                            u591 02F5  
                          u671 0226                            u663 0207                            u911 013D  
                          u831 0083                            u760 029D                            u680 03BA  
                          u672 022B                            u920 0147                            u840 00C7  
                          u761 029C                            u681 03B9                            u585 02E7  
                          u673 022C                            u921 0146                            u905 0126  
                          u841 00C6                            u930 016D                            u850 00D5  
                          u755 028F                            u931 016C                            u915 013A  
                          u851 00D4                            u835 0080                            u780 02AE  
                          u940 0183                            u860 00EA                            u781 02AD  
                          u941 0182                            u861 00E9                            u950 01AA  
                          u870 00FA                            u775 029E                            u695 03C1  
                          u951 01A9                            u935 0169                            u871 00F9  
                          u855 00D1                            u960 01B1                            u880 0108  
                          u785 02AA                            u961 01B0                            u945 017F  
                          u881 0107                            u970 01C0                            u890 011C  
                          u795 02B6                            u971 01BF                            u955 01A6  
                          u891 011B                            u875 00F6                            u885 0104  
                          u975 01BC                            u895 0118                            indf 0000  
                         l1000 0285                           l1010 029D                           l1002 028B  
                         l1012 02AE                           l1004 028E                           l1020 02C2  
                         l1100 019C                           l1022 02C7                           l1014 02B4  
                         l1006 0295                           l1102 01AA                           l1030 0028  
                         l1024 02CC                           l1016 02B5                           l1008 0299  
                         l1040 003B                           l1032 002B                           l1018 02BC  
                         l1106 01B2                           l1050 0084                           l1042 003D  
                         l1034 002D                           l1060 00C7                           l1052 0089  
                         l1044 0043                           l1036 0031                           l1028 0013  
                         l1070 00E6                           l1062 00D5                           l1054 008F  
                         l1046 005B                           l1038 0039                           l1080 0108  
                         l1064 00E0                           l1072 00EA                           l1056 00A7  
                         l1048 0077                           l1090 0147                           l1082 010E  
                         l1066 00E2                           l1058 00C3                           l1092 015F  
                         l1084 011C                           l1068 00E5                           l1076 00EC  
                         l1094 016D                           l1086 012A                           l1078 00FA  
                         l1096 0176                           l1088 013E                           l1098 0183  
                         _IOCA 0096                           _RAIE 005B                           _RAIF 0058  
                         _EinX 0056                           _main 0013                           btemp 005E  
                         start 000B                          ?_main 0020                __end_of___awdiv 02D1  
                        _CMCON 0019                          _ANSEL 0091                __end_of___lldiv 0338  
              ___awdiv@divisor 002A                          i1l106 03AC                ___awdiv@counter 002F  
                        _TRISA 0085                          _TRISC 0087                          u98_20 038F  
                        u98_21 038E                          u99_20 0393                          u99_21 0392  
                        _Boost 004E            ___lmul@multiplicand 0028                          _Triac 004A  
                        _ZeroX 0058                          _gnLED 004C                __end_of_readADC 0269  
                        pclath 000A                          status 0003                          wtemp0 005E  
              __initialization 000C                   __end_of_main 01C2           _interruptOnChangeIsr 037F  
                       ??_main 0049                         _ADCON0 001F                         _ADCON1 009F  
                       _ADRESH 001E                         _ADRESL 009E               ___awdiv@dividend 002C  
                       u100_20 039A                         u100_21 0397                         u101_24 039C  
                       u102_20 03A6                         i1l1120 039C                         i1l1112 037F  
                       u102_21 03A5                         i1l1122 03A2                         i1l1114 038B  
                       i1l1124 03A6                         i1l1116 038F                         i1l1118 0393  
                       _INTCON 000B                         ___lmul 0338                         ___wmul 03B3  
                    ??___awdiv 002E                      ??___lldiv 0039                         _irqPin 0054  
        ?_interruptOnChangeIsr 0020               ___awdiv@quotient 0031                      ??_readADC 0041  
                       saved_w 005E        __end_of__initialization 0011                 __pcstackCOMMON 0000  
                   __pbssBANK0 004A                     __pmaintext 0013                        ?___lmul 0024  
                      ?___wmul 0024         ??_interruptOnChangeIsr 0020                     __pintentry 0004  
               ___lmul@product 002D                  readADC@Analog 0045                        ___awdiv 0269  
              __size_of___lmul 0047                        ___lldiv 02D1                __size_of___wmul 0026  
                      __ptext1 01C2                        __ptext2 0338                        __ptext3 02D1  
                      __ptext4 03B3                        __ptext5 0269                        __ptext6 037F  
                      _readADC 01C2                        clrloop0 03DA           end_of_initialization 0011  
              ___lldiv@divisor 0031                ___lldiv@counter 003E                 __end_of___lmul 037F  
               __end_of___wmul 03D9            start_initialization 000C                       ??___lmul 002C  
                     ??___wmul 0000                      ___latbits 0000                  __pcstackBANK0 0020  
                     ?___awdiv 002A                       ?___lldiv 0031  __size_of_interruptOnChangeIsr 0034  
                     ?_readADC 003F              interrupt_function 0004                 ___wmul@product 0028  
                    clear_ram0 03D9              ___wmul@multiplier 0024                       _GetPoint 0050  
            ___lmul@multiplier 0024                       _SetPoint 0052               __size_of___awdiv 0068  
             __size_of___lldiv 0067               __size_of_readADC 00A7                  __size_of_main 01AF  
                     intlevel1 0000               ___lldiv@dividend 0035               ___lldiv@quotient 003A  
 __end_of_interruptOnChangeIsr 03B3  
